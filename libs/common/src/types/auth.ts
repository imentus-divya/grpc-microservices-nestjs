// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.0
//   protoc               v3.21.12
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

/** shape of user */
export interface User {
  id: number;
  username: string;
  password: string;
  userType: string;
}

/** shape of create user request */
export interface createUserAuthDto {
  id: number;
  username: string;
  password: string;
  userType: string;
}

/** empty shape - as no parameters required */
export interface Empty {
}

/** shape of all users returned */
export interface Users {
  /**
   * repeated = array
   * repeate User (User message) named users=1 / reference our User type created above
   */
  users: User[];
}

export const  AUTH_PACKAGE_NAME = "auth";

/** rpc definition - that will call grpc client which method we can actually invoke on on the server */

export interface UserAuthServiceClient {
  createUser(request: createUserAuthDto): Observable<User>;

  findAll(request: Empty): Observable<Users>;
}

/** rpc definition - that will call grpc client which method we can actually invoke on on the server */

export interface UserAuthServiceController {
  createUser(request: createUserAuthDto): Promise<User> | Observable<User> | User;

  findAll(request: Empty): Promise<Users> | Observable<Users> | Users;
}

export function UserAuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser", "findAll"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserAuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserAuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_AUTH_SERVICE_NAME = "UserAuthService";
